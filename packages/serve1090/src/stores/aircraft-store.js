const logger = require('../lib/logger')().scope('aircraft store');
const { aircraft: aircraftSchema } = require('../lib/schemas');
const {
  secondsToMillis,
  millisToSeconds
} = require('../lib/utils');

const RedisService = require('../services/redis-service');
const redis = new RedisService();
const {
  ALL_AIRCRAFT_STORE,
  VALID_AIRCRAFT_STORE,
  INVALID_AIRCRAFT_STORE
} = require('../lib/redis-keys');

const MAX_DATA_AGE_MILLIS = 30000; // 30 seconds
const VALID_AIRCRAFT_TTL = 10;
const INVALID_AIRCRAFT_TTL = 60;
const ALL_AIRCRAFT_TTL = 60;

/**
 * Accept new dump1090 aircraft data to merge into the store
 *
 * @param data {object} - raw JSON generated by dump109 with data.now in seconds since epoch
 */
async function addAircraft (data) {
  const clientNowMillis = secondsToMillis(data.now);
  const now = Date.now();
  const age = now - clientNowMillis;
  if (age > MAX_DATA_AGE_MILLIS) {
    logger.warn('rejected stale dump data', {
      clientTimestamp: new Date(clientNowMillis).toISOString(),
      age: millisToSeconds(age).toFixed(2)
    });
  } else {
    // map each aircraft hex to the aircraft
    const newAircraft = createAircraftStore(data.aircraft);
    await validateAndWrite(newAircraft);
    logger.info('accepted dump data', {
      messages: data.messages,
      clientTimestamp: new Date(clientNowMillis).toISOString()
    });
  }
}

/**
 * Convert an array of aircraft hashes into a hash mapping hex to its
 * respective aircraft hash
 *
 * @param aircraftArray {aircraft[]} - array of aircraft from dump1090
 * @returns hash of hexes mapped to respective aircraft objects
 */
function createAircraftStore (aircraftArray = []) {
  return aircraftArray.reduce((acc, aircraft) => {
    acc[aircraft.hex] = aircraft;
    return acc;
  }, {});
}

/**
 * Validate an aircraft store and write it to Redis
 *
 * @param store {object} - aircraft store validate and filter
 */
async function validateAndWrite (store) {
  const pipeline = redis.pipeline();
  Object.entries(store).forEach(([hex, aircraft]) => {
    const { value, error } = aircraftSchema.validate(aircraft);
    if (error) {
      aircraft.error = error.message.replace(/"/g, '\'');
      // value will still be truthy even if validation returns an error, and its
      // keys will be camelCased
      pipeline.hsetJsonEx(INVALID_AIRCRAFT_STORE, hex, value, INVALID_AIRCRAFT_TTL);
    } else {
      pipeline.hsetJsonEx(VALID_AIRCRAFT_STORE, hex, value, VALID_AIRCRAFT_TTL);
    }
    redis.hsetJsonEx(ALL_AIRCRAFT_STORE, hex, value, ALL_AIRCRAFT_TTL);
  });
  await pipeline.exec();
}

function getAllAircraft () {
  return getStore(ALL_AIRCRAFT_STORE);
}

function getValidAircraft () {
  return getStore(VALID_AIRCRAFT_STORE);
}

function getInvalidAircraft () {
  return getStore(INVALID_AIRCRAFT_STORE);
}

function getAircraftWithHex (hex) {
  return redis.hgetAsJson(ALL_AIRCRAFT_STORE, hex);
}

function getValidAircraftWithHex (hex) {
  return redis.hgetAsJson(VALID_AIRCRAFT_STORE, hex);
}

function getTotalAircraftCount () {
  return redis.hlen(ALL_AIRCRAFT_STORE);
}

function getValidAircraftCount () {
  return redis.hlen(VALID_AIRCRAFT_STORE);
}

/**
 * Get a store stored at key
 *
 * @param key {string} - key of store
 * @returns {Promise<{now: number, count: number, aircraft: aircraft[]}>}
 */
async function getStore (key) {
  const aircraft = await redis.hgetAllAsJsonValues(key);
  return {
    now: Date.now(),
    count: aircraft.length,
    aircraft
  };
}

module.exports = {
  addAircraft,
  getAllAircraft,
  getValidAircraft,
  getInvalidAircraft,
  getAircraftWithHex,
  getValidAircraftWithHex,
  getTotalAircraftCount,
  getValidAircraftCount,
  MAX_DATA_AGE_MILLIS
};
